// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var COLUMNS, GLIDER_GUN, ROWS, RULES, count_neighbors, create_table, get_state, get_state_numeric, list_cells, make_id, make_name, set_state, toggle, torus, update_table;

  GLIDER_GUN = [29, 4, 27, 5, 29, 5, 17, 6, 18, 6, 25, 6, 26, 6, 39, 6, 40, 6, 16, 7, 20, 7, 25, 7, 26, 7, 39, 7, 40, 7, 5, 8, 6, 8, 15, 8, 21, 8, 25, 8, 26, 8, 5, 9, 6, 9, 15, 9, 19, 9, 21, 9, 22, 9, 27, 9, 29, 9, 15, 10, 21, 10, 29, 10, 16, 11, 20, 11, 17, 12, 18, 12];

  ROWS = 50;

  COLUMNS = 75;

  RULES = {
    "2_live": 'live',
    "3_live": 'live',
    "3_dead": 'live',
    next_state: function(col, row, neighbors) {
      var lookup;
      lookup = neighbors + '_' + get_state(col, row);
      if (this.hasOwnProperty(lookup)) {
        return this[lookup];
      } else {
        return 'dead';
      }
    }
  };

  make_name = function(col, row) {
    return 'cell' + '_' + col + '_' + row;
  };

  make_id = function(col, row) {
    return '#' + make_name(col, row);
  };

  set_state = function(col, row, state) {
    return $(make_id(col, row)).attr({
      "class": state
    });
  };

  torus = function(col, row) {
    if (col > COLUMNS) {
      col = 1;
    } else if (col < 1) {
      col = COLUMNS;
    }
    if (row > ROWS) {
      row = 1;
    } else if (row < 1) {
      row = ROWS;
    }
    return [col, row];
  };

  get_state_numeric = function(col, row) {
    if ($(make_id(col, row)).hasClass('live')) {
      return 1;
    } else {
      return 0;
    }
  };

  get_state = function(col, row) {
    return ['dead', 'live'][get_state_numeric(col, row)];
  };

  toggle = function(cell_id) {
    if ($("#control")[0].value === "run") {
      return;
    }
    if ($(cell_id).hasClass('live')) {
      $(cell_id).attr({
        "class": 'dead'
      });
      return $(cell_id).innerText = "D";
    } else {
      $(cell_id).attr({
        "class": 'live'
      });
      return $(cell_id).innerText = "L";
    }
  };

  count_neighbors = function(col, row) {
    var total;
    total = get_state_numeric(col - 1, row - 1) + get_state_numeric(col, row - 1) + get_state_numeric(col + 1, row - 1);
    total += get_state_numeric(col - 1, row) + get_state_numeric(col + 1, row);
    return total + get_state_numeric(col - 1, row + 1) + get_state_numeric(col, row + 1) + get_state_numeric(col + 1, row + 1);
  };

  update_table = function(columns, rows) {
    var col, counts, row, _i, _results;
    counts = (function() {
      var _i, _results;
      _results = [];
      for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (col = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; col = 1 <= columns ? ++_j : --_j) {
            _results1.push(count_neighbors(col, row));
          }
          return _results1;
        })());
      }
      return _results;
    })();
    _results = [];
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _results.push((function(counts) {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; col = 1 <= columns ? ++_j : --_j) {
          _results1.push((function(counts) {
            var err;
            try {
              return set_state(col, row, RULES.next_state(col, row, counts[row - 1][col - 1]));
            } catch (_error) {
              err = _error;
              console.log(err);
              console.log(col);
              return console.log(row);
            }
          })(counts));
        }
        return _results1;
      })(counts));
    }
    return _results;
  };

  create_table = function(div, columns, rows) {
    var row, table, _fn, _i;
    table = document.createElement('table');
    _fn = function(table) {
      var col, tr, _fn1, _j;
      tr = document.createElement('tr');
      _fn1 = function(tr) {
        var label, td;
        label = 'cell_' + col + '_' + row;
        td = document.createElement('td');
        td.id = label;
        td.className = "dead";
        $(td).bind('click', (function(_this) {
          return function(event) {
            return toggle(event.target);
          };
        })(this));
        return tr.appendChild(td);
      };
      for (col = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; col = 1 <= columns ? ++_j : --_j) {
        _fn1(tr);
      }
      return table.appendChild(tr);
    };
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _fn(table);
    }
    return $(div).append(table);
  };

  list_cells = function(div, columns, rows) {
    var col, row, _i, _results;
    $(div)[0].innerHTML = '<pre id="coord_list"></pre>';
    _results = [];
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; col = 1 <= columns ? ++_j : --_j) {
          if (get_state(col, row) === 'live') {
            _results1.push($("#coord_list").append(col + ", " + row + "\n"));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  $(document).ready(function() {
    var index;
    create_table("#life", COLUMNS, ROWS);
    index = 0;
    while (index < GLIDER_GUN.length) {
      set_state(GLIDER_GUN[index], GLIDER_GUN[index + 1], 'live');
      index += 2;
    }
    $("#list_button").bind('click', function() {
      return list_cells("#list_cells", COLUMNS, ROWS);
    });
    $("#control").bind('click', function() {
      if ($("#control")[0].value === "run") {
        $("#control")[0].innerHTML = "Run";
        return $("#control")[0].value = "stop";
      } else {
        $("#control")[0].innerHTML = "Stop";
        return $("#control")[0].value = "run";
      }
    });
    return setInterval(function() {
      if ($("#control")[0].value === "run") {
        return update_table(COLUMNS, ROWS);
      }
    }, 100);
  });

}).call(this);

//# sourceMappingURL=main.js.map
